update.packages()
library(sparklyr)
library(dplyr)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "spark://Westfall:7077", version = "2.1.0")
sc
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
load("~/Courses/CS871_AdvQuant/Unit_4/IP/.RData")
update.packages()
install.packages("swirl")
installed.packages("caret")
install.packages("caret")
install.packages("gbmr")
install.packages("gbm")
install.packages("pamr")
install.packages("lubridate")
install.package("KernSmooth")
install.package("KernSmoothR")
install.package("KernSmooth R")
install.package("kernsmooth")
install.package("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/usr/local/lib/R/site-library")
detach("package:KernSmooth", unload=TRUE)
library("KernSmooth", lib.loc="/usr/lib/R/library")
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size =1, prob = 0.5)
table(trainIndicator)
trainSpam = spam(trainIndicator == 1, )
trainSpam = spam[trainIndicator == 1, ]
testPam = spam[trainIndicator, === 0, ]
testsPam = spam[trainIndicator, === 0, ]
testsPam = spam[trainIndicator, == 0, ]
testsPam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
testSpam = spam[trainIndicator, == 0, ]
testSpam = spam[trainIndicator == 0, ]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
remove(testsPam)
predictedSpam[predictionModel$fitted > 0.5] = "spam"
remove(testsPam
)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
update.packages()
update.packages()
update.packages()
update.packages()
install.packages("GGally")
update.packages()
install.packages("UsingR")
install.packages("caret")
update.packages()
update.packages()
install.packages("caret")
install.packages("swirlify")
setwd("Dropbox/Data_Science/dataproducts/week4")
ls
list.files()
library(shiny)
runApp("starbucksUsa")
install.packages("leaflet")
runApp("starbucksUsa")
runApp("starbucksUsa")
?grepl
starDF <-
read.csv(file = "data/starbucks_us_locations.csv", header = TRUE, sep = ",")
starDF <-
read.csv(file = "starbucksUsa/data/starbucks_us_locations.csv", header = TRUE, sep = ",")
starDF <-
read.csv(file = "starbucksUsa/data/starbucks_us_locations.csv", header = TRUE, sep = ",")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
runApp("starbucksUsa")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='gseamans', token='7E088711A083394AAF648EB975F042DB', secret='gV+xGvytFHn/NqYnsruGOby6LO9CcN1yLbh/OJqP')
getwd()
list.files()
rsconnect::deployApp("starbucksUsa")
install.packages("slidify")
install.packages("slidify")
install_github("slidify", "ramnathv")
require(devtools)
install.packages("devtools")
install_github("slidify", "ramnathv")
setwd("starbucksUsa/")
install.packages("knitr")
runApp("../starbucksUsa")
rsconnect::deployApp("../starbucksUsa")
rsconnect::deployApp("../starbucksUsa")
